{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import dtree\n",
    "import monkdata as m\n",
    "import drawtree_qt5 as draw\n",
    "import random\n",
    "from statistics import mean, stdev\n",
    "import matplotlib.pyplot as plt"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Entropy for monk1 :  1.0\n",
      "Entropy for monk2 :  0.957117428264771\n",
      "Entropy for monk3 :  0.9998061328047111\n"
     ]
    }
   ],
   "source": [
    "#Assignment 1\n",
    "entropy1 = dtree.entropy(m.monk1)\n",
    "entropy2 = dtree.entropy(m.monk2)\n",
    "entropy3 = dtree.entropy(m.monk3)\n",
    "\n",
    "print('Entropy for monk1 : ', entropy1)\n",
    "print('Entropy for monk2 : ', entropy2)\n",
    "print('Entropy for monk3 : ', entropy3)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "monk1 - attribute1 :  0.07527255560831925\n",
      "monk1 - attribute2 :  0.005838429962909286\n",
      "monk1 - attribute3 :  0.00470756661729721\n",
      "monk1 - attribute4 :  0.02631169650768228\n",
      "monk1 - attribute5 :  0.28703074971578435\n",
      "monk1 - attribute6 :  0.0007578557158638421\n",
      "Attribute 5 gives the highest information gain and should be used to split the examples at the root node.\n",
      "\n",
      "monk2 - attribute1 :  0.0037561773775118823\n",
      "monk2 - attribute2 :  0.0024584986660830532\n",
      "monk2 - attribute3 :  0.0010561477158920196\n",
      "monk2 - attribute4 :  0.015664247292643818\n",
      "monk2 - attribute5 :  0.01727717693791797\n",
      "monk2 - attribute6 :  0.006247622236881467\n",
      "Attribute 5 gives the highest information gain and should be used to split the examples at the root node.\n",
      "\n",
      "monk3 - attribute1 :  0.007120868396071844\n",
      "monk3 - attribute2 :  0.29373617350838865\n",
      "monk3 - attribute3 :  0.0008311140445336207\n",
      "monk3 - attribute4 :  0.002891817288654397\n",
      "monk3 - attribute5 :  0.25591172461972755\n",
      "monk3 - attribute6 :  0.007077026074097326\n",
      "Attribute 2 gives the highest information gain and should be used to split the examples at the root node.\n",
      "\n"
     ]
    }
   ],
   "source": [
    "#Assignment 3\n",
    "\n",
    "InfGain1a1 = dtree.averageGain(m.monk1,m.attributes[0]);\n",
    "InfGain1a2 = dtree.averageGain(m.monk1,m.attributes[1]);\n",
    "InfGain1a3 = dtree.averageGain(m.monk1,m.attributes[2]);\n",
    "InfGain1a4 = dtree.averageGain(m.monk1,m.attributes[3]);\n",
    "InfGain1a5 = dtree.averageGain(m.monk1,m.attributes[4]);\n",
    "InfGain1a6 = dtree.averageGain(m.monk1,m.attributes[5]);\n",
    "\n",
    "print('monk1 - attribute1 : ', InfGain1a1)\n",
    "print('monk1 - attribute2 : ', InfGain1a2)\n",
    "print('monk1 - attribute3 : ', InfGain1a3)\n",
    "print('monk1 - attribute4 : ', InfGain1a4)\n",
    "print('monk1 - attribute5 : ', InfGain1a5)\n",
    "print('monk1 - attribute6 : ', InfGain1a6)\n",
    "print('Attribute 5 gives the highest information gain and should be used to split the examples at the root node.')\n",
    "print('')\n",
    "\n",
    "InfGain2a1 = dtree.averageGain(m.monk2,m.attributes[0]);\n",
    "InfGain2a2 = dtree.averageGain(m.monk2,m.attributes[1]);\n",
    "InfGain2a3 = dtree.averageGain(m.monk2,m.attributes[2]);\n",
    "InfGain2a4 = dtree.averageGain(m.monk2,m.attributes[3]);\n",
    "InfGain2a5 = dtree.averageGain(m.monk2,m.attributes[4]);\n",
    "InfGain2a6 = dtree.averageGain(m.monk2,m.attributes[5]);\n",
    "\n",
    "print('monk2 - attribute1 : ', InfGain2a1)\n",
    "print('monk2 - attribute2 : ', InfGain2a2)\n",
    "print('monk2 - attribute3 : ', InfGain2a3)\n",
    "print('monk2 - attribute4 : ', InfGain2a4)\n",
    "print('monk2 - attribute5 : ', InfGain2a5)\n",
    "print('monk2 - attribute6 : ', InfGain2a6)\n",
    "print('Attribute 5 gives the highest information gain and should be used to split the examples at the root node.')\n",
    "print('')\n",
    "\n",
    "InfGain3a1 = dtree.averageGain(m.monk3,m.attributes[0]);\n",
    "InfGain3a2 = dtree.averageGain(m.monk3,m.attributes[1]);\n",
    "InfGain3a3 = dtree.averageGain(m.monk3,m.attributes[2]);\n",
    "InfGain3a4 = dtree.averageGain(m.monk3,m.attributes[3]);\n",
    "InfGain3a5 = dtree.averageGain(m.monk3,m.attributes[4]);\n",
    "InfGain3a6 = dtree.averageGain(m.monk3,m.attributes[5]);\n",
    "\n",
    "print('monk3 - attribute1 : ', InfGain3a1)\n",
    "print('monk3 - attribute2 : ', InfGain3a2)\n",
    "print('monk3 - attribute3 : ', InfGain3a3)\n",
    "print('monk3 - attribute4 : ', InfGain3a4)\n",
    "print('monk3 - attribute5 : ', InfGain3a5)\n",
    "print('monk3 - attribute6 : ', InfGain3a6)\n",
    "print('Attribute 2 gives the highest information gain and should be used to split the examples at the root node.')\n",
    "print('')\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "We wish to maximize the information gain such that we get small entropies for the subsets; this means that the subsets are predictable, which is the goal of the decision tree.\n"
     ]
    }
   ],
   "source": [
    "#Assignment 4\n",
    "\n",
    "print('We wish to maximize the information gain such that we get small entropies for the subsets; this means that the subsets are predictable, which is the goal of the decision tree.')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Monk1a - attribute 1 :  0.0\n",
      "Monk1a - attribute 2 :  0.0\n",
      "Monk1a - attribute 3 :  0.0\n",
      "Monk1a - attribute 4 :  0.0\n",
      "Monk1a - attribute 6 :  0.0\n",
      " \n",
      "Monk1b - attribute 1 :  0.040216841609413634\n",
      "Monk1b - attribute 2 :  0.015063475072186083\n",
      "Monk1b - attribute 3 :  0.03727262736015946\n",
      "Monk1b - attribute 4 :  0.04889220262952931\n",
      "Monk1b - attribute 6 :  0.025807284723902146\n",
      " \n",
      "Monk1c - attribute 1 :  0.03305510013455182\n",
      "Monk1c - attribute 2 :  0.002197183539100922\n",
      "Monk1c - attribute 3 :  0.017982293842278896\n",
      "Monk1c - attribute 4 :  0.01912275517747053\n",
      "Monk1c - attribute 6 :  0.04510853782483648\n",
      " \n",
      "Monk1d - attribute 1 :  0.20629074641530198\n",
      "Monk1d - attribute 2 :  0.033898395077640586\n",
      "Monk1d - attribute 3 :  0.02590614543498493\n",
      "Monk1d - attribute 4 :  0.07593290844153944\n",
      "Monk1d - attribute 6 :  0.0033239629631565126\n",
      " \n"
     ]
    }
   ],
   "source": [
    "#Assignment 5\n",
    "\n",
    "#Monk1 - attribute 5\n",
    "monk1a = dtree.select(m.monk1, m.attributes[4],1);\n",
    "monk1b = dtree.select(m.monk1, m.attributes[4],2);\n",
    "monk1c = dtree.select(m.monk1, m.attributes[4],3);\n",
    "monk1d = dtree.select(m.monk1, m.attributes[4],4);\n",
    "\n",
    "# no need to test attribute 5\n",
    "InfGain1a1 = dtree.averageGain(monk1a,m.attributes[0]);\n",
    "InfGain1a2 = dtree.averageGain(monk1a,m.attributes[1]);\n",
    "InfGain1a3 = dtree.averageGain(monk1a,m.attributes[2]);\n",
    "InfGain1a4 = dtree.averageGain(monk1a,m.attributes[3]);\n",
    "InfGain1a6 = dtree.averageGain(monk1a,m.attributes[5]);\n",
    "\n",
    "print('Monk1a - attribute 1 : ', InfGain1a1)\n",
    "print('Monk1a - attribute 2 : ', InfGain1a2)\n",
    "print('Monk1a - attribute 3 : ', InfGain1a3)\n",
    "print('Monk1a - attribute 4 : ', InfGain1a4)\n",
    "print('Monk1a - attribute 6 : ', InfGain1a6)\n",
    "print(' ')\n",
    "\n",
    "InfGain1b1 = dtree.averageGain(monk1b,m.attributes[0]);\n",
    "InfGain1b2 = dtree.averageGain(monk1b,m.attributes[1]);\n",
    "InfGain1b3 = dtree.averageGain(monk1b,m.attributes[2]);\n",
    "InfGain1b4 = dtree.averageGain(monk1b,m.attributes[3]);\n",
    "InfGain1b6 = dtree.averageGain(monk1b,m.attributes[5]);\n",
    "\n",
    "print('Monk1b - attribute 1 : ', InfGain1b1)\n",
    "print('Monk1b - attribute 2 : ', InfGain1b2)\n",
    "print('Monk1b - attribute 3 : ', InfGain1b3)\n",
    "print('Monk1b - attribute 4 : ', InfGain1b4)\n",
    "print('Monk1b - attribute 6 : ', InfGain1b6)\n",
    "print(' ')\n",
    "\n",
    "InfGain1c1 = dtree.averageGain(monk1c,m.attributes[0]);\n",
    "InfGain1c2 = dtree.averageGain(monk1c,m.attributes[1]);\n",
    "InfGain1c3 = dtree.averageGain(monk1c,m.attributes[2]);\n",
    "InfGain1c4 = dtree.averageGain(monk1c,m.attributes[3]);\n",
    "InfGain1c6 = dtree.averageGain(monk1c,m.attributes[5]);\n",
    "\n",
    "print('Monk1c - attribute 1 : ', InfGain1c1)\n",
    "print('Monk1c - attribute 2 : ', InfGain1c2)\n",
    "print('Monk1c - attribute 3 : ', InfGain1c3)\n",
    "print('Monk1c - attribute 4 : ', InfGain1c4)\n",
    "print('Monk1c - attribute 6 : ', InfGain1c6)\n",
    "print(' ')\n",
    "\n",
    "InfGain1d1 = dtree.averageGain(monk1d,m.attributes[0]);\n",
    "InfGain1d2 = dtree.averageGain(monk1d,m.attributes[1]);\n",
    "InfGain1d3 = dtree.averageGain(monk1d,m.attributes[2]);\n",
    "InfGain1d4 = dtree.averageGain(monk1d,m.attributes[3]);\n",
    "InfGain1d6 = dtree.averageGain(monk1d,m.attributes[5]);\n",
    "\n",
    "print('Monk1d - attribute 1 : ', InfGain1d1)\n",
    "print('Monk1d - attribute 2 : ', InfGain1d2)\n",
    "print('Monk1d - attribute 3 : ', InfGain1d3)\n",
    "print('Monk1d - attribute 4 : ', InfGain1d4)\n",
    "print('Monk1d - attribute 6 : ', InfGain1d6)\n",
    "print(' ')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Most common for a5 = 1:  True\n",
      "Most common for a5 = 2:  False\n",
      "Most common for a5 = 3:  False\n",
      "Most common for a5 = 4:  False\n"
     ]
    }
   ],
   "source": [
    "#Assignment 5 - Most Common\n",
    "print('Most common for a5 = 1: ',dtree.mostCommon(monk1a))\n",
    "print('Most common for a5 = 2: ',dtree.mostCommon(monk1b))\n",
    "print('Most common for a5 = 3: ',dtree.mostCommon(monk1c))\n",
    "print('Most common for a5 = 4: ',dtree.mostCommon(monk1d))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.8287037037037037\n",
      "1.0\n",
      "0.6921296296296297\n",
      "1.0\n",
      "0.9444444444444444\n",
      "1.0\n"
     ]
    }
   ],
   "source": [
    "monk1tree = dtree.buildTree(m.monk1, m.attributes)\n",
    "#draw.drawTree(monk1tree)\n",
    "print(dtree.check(monk1tree, m.monk1test))\n",
    "print(dtree.check(monk1tree, m.monk1))\n",
    "\n",
    "monk2tree = dtree.buildTree(m.monk2, m.attributes)\n",
    "print(dtree.check(monk2tree, m.monk2test))\n",
    "print(dtree.check(monk2tree, m.monk2))\n",
    "\n",
    "monk3tree = dtree.buildTree(m.monk3, m.attributes)\n",
    "print(dtree.check(monk3tree, m.monk3test))\n",
    "print(dtree.check(monk3tree, m.monk3))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.7986111111111112\n",
      "0.8125\n"
     ]
    }
   ],
   "source": [
    "def partition(data, fraction):\n",
    "    ldata = list(data)\n",
    "    random.shuffle(ldata)\n",
    "    breakPoint = int(len(ldata) * fraction)\n",
    "    return ldata[:breakPoint], ldata[breakPoint:]\n",
    "\n",
    "monk1train, monk1val = partition(m.monk1, 0.6)\n",
    "\n",
    "tree1 = dtree.buildTree(monk1train, m.attributes)\n",
    "\n",
    "prunedTrees = dtree.allPruned(tree1)\n",
    "bestTree = tree1\n",
    "prevbestTree = tree1\n",
    "\n",
    "while True:\n",
    "    prevbestTree = bestTree\n",
    "    for x in prunedTrees:\n",
    "        if (dtree.check(x, monk1val) > dtree.check(bestTree, monk1val)):\n",
    "            bestTree = x\n",
    "    if (dtree.check(bestTree, monk1val) == dtree.check(prevbestTree, monk1val)):\n",
    "        break\n",
    "    else:\n",
    "        prunedTrees = dtree.allPruned(bestTree)\n",
    "        \n",
    "print(dtree.check(tree1, m.monk1test))\n",
    "print(dtree.check(bestTree, m.monk1test))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.9351851851851852\n",
      "0.9629629629629629\n"
     ]
    }
   ],
   "source": [
    "monk3train, monk3val = partition(m.monk3, 0.6)\n",
    "\n",
    "tree3 = dtree.buildTree(monk3train, m.attributes)\n",
    "\n",
    "prunedTrees = dtree.allPruned(tree3)\n",
    "bestTree = tree3\n",
    "prevbestTree = tree3\n",
    "\n",
    "while True:\n",
    "    prevbestTree = bestTree\n",
    "    for x in prunedTrees:\n",
    "        if (dtree.check(x, monk3val) > dtree.check(bestTree, monk3val)):\n",
    "            bestTree = x\n",
    "    if (dtree.check(bestTree, monk3val) == dtree.check(prevbestTree, monk3val)):\n",
    "        break\n",
    "    else:\n",
    "        prunedTrees = dtree.allPruned(bestTree)\n",
    "\n",
    "print(dtree.check(tree3, m.monk3test))\n",
    "print(dtree.check(bestTree, m.monk3test))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "#Assignment 7\n",
    "inputFraction = [0.3, 0.4, 0.5, 0.6, 0.7, 0.8]\n",
    "resultsMonk1 = [[] for _ in range(0, 6)]\n",
    "resultsMonk3 = [[] for _ in range(0, 6)]\n",
    "\n",
    "def partition(data, fraction):\n",
    "    ldata = list(data)\n",
    "    random.shuffle(ldata)\n",
    "    breakPoint = int(len(ldata) * fraction)\n",
    "    return ldata[:breakPoint], ldata[breakPoint:]\n",
    "\n",
    "for _ in range(0,500):\n",
    "    for i, element in enumerate(inputFraction):\n",
    "\n",
    "        monk1train, monk1val = partition(m.monk1, element)\n",
    "\n",
    "        tree1 = dtree.buildTree(monk1train, m.attributes)\n",
    "\n",
    "        prunedTrees = dtree.allPruned(tree1)\n",
    "        bestTree = tree1\n",
    "        prevbestTree = tree1\n",
    "\n",
    "        while True:\n",
    "            prevbestTree = bestTree\n",
    "            for x in prunedTrees:\n",
    "                if (dtree.check(x, monk1val) >= dtree.check(bestTree, monk1val)):\n",
    "                    bestTree = x\n",
    "            if (dtree.check(bestTree, monk1val) == dtree.check(prevbestTree, monk1val)):\n",
    "                break\n",
    "            else:\n",
    "                prunedTrees = dtree.allPruned(bestTree)\n",
    "\n",
    "        #print('monk1 fraction = ',element, ': ',dtree.check(tree1, m.monk1test))\n",
    "        #print('monk1 improved fraction = ',element ,': ',dtree.check(bestTree, m.monk1test))\n",
    "        resultsMonk1[i].append(dtree.check(bestTree, m.monk1test))\n",
    "\n",
    "        monk3train, monk3val = partition(m.monk3, element)\n",
    "\n",
    "        tree3 = dtree.buildTree(monk3train, m.attributes)\n",
    "\n",
    "        prunedTrees = dtree.allPruned(tree3)\n",
    "        bestTree = tree3\n",
    "        prevbestTree = tree3\n",
    "\n",
    "        while True:\n",
    "            prevbestTree = bestTree\n",
    "            for x in prunedTrees:\n",
    "                if (dtree.check(x, monk3val) > dtree.check(bestTree, monk3val)):\n",
    "                    bestTree = x\n",
    "            if (dtree.check(bestTree, monk3val) == dtree.check(prevbestTree, monk3val)):\n",
    "                break\n",
    "            else:\n",
    "                prunedTrees = dtree.allPruned(bestTree)\n",
    "\n",
    "        #print('monk3 fraction = ',element, ': ',dtree.check(tree3, m.monk3test))\n",
    "        #print('monk3 improved fraction = ',element ,': ',dtree.check(bestTree, m.monk3test))\n",
    "        resultsMonk3[i].append(dtree.check(bestTree, m.monk3test))\n",
    "        \n",
    "\n",
    "error1 = []\n",
    "stdev1 = []\n",
    "for x in resultsMonk1:\n",
    "    error1.append(1 - mean(x))\n",
    "    stdev1.append(stdev(x))\n",
    "    \n",
    "error3 = []\n",
    "stdev3 = []\n",
    "for x in resultsMonk3:\n",
    "    error3.append(1 - mean(x))\n",
    "    stdev3.append(stdev(x))\n",
    "    \n",
    "plt.plot(inputFraction, error1, 'r', inputFraction, error3, 'b')\n",
    "plt.title(\"Test Error vs Size of Taining Data\")\n",
    "plt.xlabel(\"Fraction\")\n",
    "plt.ylabel(\"Classification Error\")\n",
    "plt.legend([\"Monk1\", \"Monk3\"])\n",
    "plt.show()\n",
    "\n",
    "plt.plot(inputFraction, stdev1, 'g', inputFraction, stdev3, 'y')\n",
    "plt.title(\"Standard Deviation vs Size of Taining Data\")\n",
    "plt.xlabel(\"Fraction\")\n",
    "plt.ylabel(\"Standard Deviation\")\n",
    "plt.legend([\"Monk1\", \"Monk3\"])\n",
    "plt.show()\n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "\n"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
